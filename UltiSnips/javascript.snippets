# Normal javascript snippets
#

snippet rv "require a variable" b
var $1 = require('${2:./}${3:$1}$4');$0
endsnippet

snippet rrc "require React class" b
var $1 = require('${2:./}${3:$1}.react');$0
endsnippet

snippet rp "require prototype" b
var $1 = require('${2:./}${3:$1}.proto');$0
endsnippet


# ==========================================
# React Snippets
#

# ==========================================
# Creating new React classes Section
#
snippet fce "Fluxxed React component and exported" b
var FluxIt = require('${1:./}FluxIt.react');

var ${2:`!v substitute(expand('%:t:r'), '.react', '', '')`}Store = require('./$2Store');
var $2API = require('./$2API');
$3
var $2 = React.createClass({
	propTypes: {
		$4: ${7:React.PropTypes.string}$8
	},

	render: function() {
		return (
			${0:<div />}
		);
	}
});

$2 = 
	FluxIt.init(
		$2,
		function() {
		  return {
				${4:something}: $2Store.${5:get${4/\w/\u$0/}()}
			};
		},
		[$2Store],
		[$2API.${6:get${4/\w/\u$0/}}]
	);

module.exports = $2;
endsnippet

snippet rce "React class and export component" b
var ${1:ClassName} = React.createClass({
	$2
	render: function() {
		return (
			${0:<div />}
		);
	}
});

module.exports = $1;
endsnippet

snippet rc "React class" b
var ${1:ClassName} = React.createClass({
	$2
	render: function() {
		return (
			${0:<div />}
		);
	}
});
endsnippet


# ==========================================
# Component Specs and Lifecycle Section
#
snippet rend "React render function" b
render: function() {
	return (
		${0:<div />}
	);
}
endsnippet

snippet gis "get initial state" b
getInitialState: function() {
	return {
		$1
	};
},
$0
endsnippet


snippet gdp "get default props" b
getDefaultProps: function() {
	return {
		$1
	};
},
$0
endsnippet

snippet pt "React prop types definition" b
propTypes: {
	${1:someProp}: ${2:React.PropTypes.string}
},
$0
endsnippet

snippet statics "react statics" b
statics: {
	${1:foo}: function(${2:bar}) {
		${3:return 'foo' === bar;}
	}
},
$0
endsnippet


snippet cwm "component will mount" b
componentWillMount: function() {
	$1
},
$0
endsnippet

snippet cdm "component did mount" b
componentDidMount: function() {
	$1
},
$0
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps: function(${1:nextProps}) {
	$2
},
$0
endsnippet

snippet scu "should component update" b
shouldComponentUpdate: function(${1:nextProps}, ${2:nextState}) {
	return ${3:$1.id !== this.props.id};
},
$0
endsnippet

snippet cwu "component will update" b
componentWillUpdate: function(${1:nextProps}, ${2:nextState}) {
	$3
},
$0
endsnippet

snippet cdu "component did update" b
componentDidUpdate: function(${1:prevProps}, ${2:prevState}) {
	$3
},
$0
endsnippet

snippet cwum "component will unmount" b
componentWillUnmount: function() {
	$1
},
$0
endsnippet


# ==========================================
# Prop Types Section
#

snippet np "new property" b
${1:prop}: ${2:React.PropTypes.string}$0
endsnippet


# Inline prop types
snippet pt.a "React PropTypes array" w
React.PropTypes.array
endsnippet

snippet pt.ar "React PropTypes array required" w
React.PropTypes.array.isRequired
endsnippet

snippet pt.b "React PropTypes boolean" w
React.PropTypes.bool
endsnippet

snippet pt.br "React PropTypes boolean required" w
React.PropTypes.bool.isRequired
endsnippet

snippet pt.f "React PropTypes function" w
React.PropTypes.func
endsnippet

snippet pt.fr "React PropTypes function required" w
React.PropTypes.func.isRequired
endsnippet

snippet pt.nu "React PropTypes number" w
React.PropTypes.number
endsnippet

snippet pt.nur "React PropTypes number required" w
React.PropTypes.number.isRequired
endsnippet

snippet pt.o "React PropTypes object" w
React.PropTypes.object
endsnippet

snippet pt.or "React PropTypes object required" w
React.PropTypes.object.isRequired
endsnippet

snippet pt.s "React PropType string" w
React.PropTypes.string
endsnippet

snippet pt.sr "React PropType string required" w
React.PropTypes.string.isRequired
endsnippet

snippet pt.no "React PropTypes node" w
React.PropTypes.node
endsnippet

snippet pt.nor "React PropTypes node required" w
React.PropTypes.node.isRequired
endsnippet

snippet pt.e "React PropTypes element" w
React.PropTypes.element
endsnippet

snippet pt.er "React PropTypes element required" w
React.PropTypes.element.isRequired
endsnippet

snippet pt.ao "React PropTypes arrayOf" w
React.PropTypes.arrayOf(${1:React.PropTypes.string})$0
endsnippet

snippet pt.aor "React PropTypes arrayOf required" w
React.PropTypes.arrayOf(${1:React.PropTypes.string}).isRequired$0
endsnippet

snippet pt.io "React PropTypes instanceOf" w
React.PropTypes.instanceOf(${1:React.PropTypes.string})$0
endsnippet

snippet pt.ior "React PropTypes instanceOf required" w
React.PropTypes.instanceOf(${1:React.PropTypes.string}).isRequired$0
endsnippet

snippet pt.oo "React PropTypes objectOf" w
React.PropTypes.objectOf(${1:React.PropTypes.string})$0
endsnippet

snippet pt.oor "React PropTypes objectOf required" w
React.PropTypes.objectOf(${1:React.PropTypes.string}).isRequired$0
endsnippet

snippet pt.one "React PropTypes oneOf" w
React.PropTypes.oneOf(['$1'$2])$0
endsnippet

snippet pt.oner "React PropTypes oneOf required" w
React.PropTypes.oneOf(['$1'$2]).isRequired$0
endsnippet

snippet pt.onet "React PropTypes onOfType" w
React.PropTypes.oneOfType([
	$1
])$0
endsnippet

snippet pt.onetr "React PropTypes onOfType required" w
React.PropTypes.oneOfType([
	$1
]).isRequired$0
endsnippet


# ==========================================
# Attributes and helpers Section
#

snippet varp "get property in variable" b
var ${1:foo} = this.props.$1;
endsnippet

snippet vars "get state in variable" b
var ${1:foo} = this.state.$1;
endsnippet

snippet ss "set state" b
this.setState({
	$1
});$0
endsnippet

snippet cn "className"
className={${1:classString}}$0
endsnippet

snippet cns "className as a string"
className="${1:some css classes}"$0
endsnippet

snippet p. "get property" w
this.props.${1:name}
endsnippet

snippet s. "get state" w
this.state.${1:name}
endsnippet

snippet ppa "pass property as"
${1:property}={this.props.${2:$1}}
endsnippet

snippet psa "pass state as" 
${1:state}={this.props.${2:$1}}
endsnippet

snippet pap "pass all properties"
{...this.props}
endsnippet

snippet pas "pass all states"
{...this.state}
endsnippet

snippet mapv "map react props or state into variable" b
var ${1:elements} = this.${2:props}.${3:propName}.map(function(${4:propName}) {
	return (
		$0
	);
})}
endsnippet

snippet mapr "map react props or state into a render" b
{this.${1:props}.${2:propName}.map(function(${3:propName}) {
	return (
		$0
	);
})}
endsnippet


# ==========================================
# Flux Snippets
#

snippet g_ "get private variable" b
get$1: function() {
	return _${1/\w/\l$0/};
},
$0
endsnippet


snippet i_ "is private variable" b
is$1: function() {
	return _is$1;
},
$0
endsnippet


snippet s_ "set private variable" b
function set$1(${1/\w/\l$0/}) {
	_${1/\w/\l$0/} = ${1/\w/\l$0/};$2
}$0
endsnippet


# ==========================================
# Flux Store Snippets
#
snippet fsto "new flux store" b
var AppDispatcher = require('${1:./}AppDispatcher');
var EventEmitter = require('events').EventEmitter;
var ${2:`!v substitute(expand('%:t:r'), 'Store', '', '')`}Constants = require('${3:./}$2Constants');
var _ = require('underscore');

$4

var $2Store = _.extend({}, EventEmitter.prototype, {
	$0
	emitChange: function() {
		this.emit('change');
	},

	addChangeListener: function(callback) {
		this.on('change', callback);
	},

	removeChangeListener: function(callback) {
		this.removeListener('change', callback);
	}
});

AppDispatcher.register(function(payload) {
	var action = payload.action;

	switch(action.actionType) {
		$5
		default:
			return true;
	}

	$2Store.emitChange();
	return true;
});

module.exports = $2Store;
endsnippet

snippet fcase "flux store case statement" b
case ${1:`!v substitute(expand('%:t:r'), 'Store', '', '')`}Constants.`!p snip.rv=capscore(t[1])`_$2:
  $3
	break;
endsnippet

# ==========================================
# Flux Actions Snippets
#
snippet fact "new flux actions" b
var AppDispatcher = require('${1:./}AppDispatcher');
var ${2:`!v substitute(expand('%:t:r'), 'Actions', '', '')`}Constants = require('${3:./}$2Constants');

var $2Actions = {
	$0
};

module.exports = $2Actions;
endsnippet

global !p
def capscore(t):
	return '_'.join([ w.upper() for w in re.findall('[A-Z]+[a-z]*', t) ])
endglobal


snippet faf "new flux action function" b
$1: function($2) {
	AppDispatcher.handleAction({
		actionType: ${3:`!v substitute(expand('%:t:r'), 'Actions', '', '')`}Constants.`!p snip.rv=capscore(t[3])`_${1/([A-Z]+)|([a-z])/(?1:_$0)(?2:\u$0)/g},
		${5:${2/(\w+).*/$1/}}: ${2/(\w+).*/$1/}$6
	});
},$0
endsnippet



# ==========================================
# Flux Constants Snippets
#
snippet rkm "React key mirror" b
var keyMirror = require('react/lib/keyMirror');
endsnippet

snippet fcon "flux constants" b
var keyMirror = require('react/lib/keyMirror');

module.exports = keyMirror({
	$0
});
endsnippet

snippet kmv "key mirror value" b
${1:`!v substitute(expand('%:t:r'), 'Actions', '', '')`}: null,
endsnippet


# ==========================================
# Flux API Snippets
#
snippet fapi "Flux api outline" b
var ${1:`!v substitute(expand('%:t:r'), 'API', '', '')`}Actions = require('${2:./}$1Actions');

module.exports = {
	$0
};
endsnippet
